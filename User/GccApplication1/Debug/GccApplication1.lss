
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00000f76  0000100a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080009e  0080009e  00001048  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001078  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001522  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af5  00000000  00000000  00002806  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001531  00000000  00000000  000032fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007bc  00000000  00000000  0000482c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a0  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe9  00000000  00000000  00005788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00006771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b0 04 	jmp	0x960	; 0x960 <__vector_1>
   8:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_2>
   c:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__vector_10>
  2c:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e9       	ldi	r26, 0x9E	; 158
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3a       	cpi	r26, 0xA8	; 168
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	}
	return 1;
}

int main(void)
{
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	c4 54       	subi	r28, 0x44	; 68
  9e:	d1 09       	sbc	r29, r1
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	DIO_setPinDir(DIO_PIND3,DIO_OUTPUT);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	8b e1       	ldi	r24, 0x1B	; 27
  ae:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_setPinDir>
	SPI_Init();
  b2:	0e 94 67 05 	call	0xace	; 0xace <SPI_Init>
	UART_init();
  b6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <UART_init>
	I2C_init(MASTER);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 43 05 	call	0xa86	; 0xa86 <I2C_init>
	
	u8 adminuser[5]="admin";
  c0:	85 e0       	ldi	r24, 0x05	; 5
  c2:	e8 e9       	ldi	r30, 0x98	; 152
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	de 01       	movw	r26, r28
  c8:	98 96       	adiw	r26, 0x28	; 40
  ca:	01 90       	ld	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	8a 95       	dec	r24
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x38>
	u8 adminpassword[4]="1234";
  d2:	81 e3       	ldi	r24, 0x31	; 49
  d4:	92 e3       	ldi	r25, 0x32	; 50
  d6:	9e a7       	std	Y+46, r25	; 0x2e
  d8:	8d a7       	std	Y+45, r24	; 0x2d
  da:	83 e3       	ldi	r24, 0x33	; 51
  dc:	94 e3       	ldi	r25, 0x34	; 52
  de:	98 ab       	std	Y+48, r25	; 0x30
  e0:	8f a7       	std	Y+47, r24	; 0x2f
	DIO_setPinDir(DIO_PIND3,DIO_OUTPUT);
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	8b e1       	ldi	r24, 0x1B	; 27
  e6:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_setPinDir>
	//saving admin username
	for(int b=0; b<5; b++)
  ea:	1a 82       	std	Y+2, r1	; 0x02
  ec:	19 82       	std	Y+1, r1	; 0x01
  ee:	85 c0       	rjmp	.+266    	; 0x1fa <main+0x168>
	{
		EEPROM_writeData(adminuser[b],b);
  f0:	49 81       	ldd	r20, Y+1	; 0x01
  f2:	5a 81       	ldd	r21, Y+2	; 0x02
  f4:	9e 01       	movw	r18, r28
  f6:	28 5d       	subi	r18, 0xD8	; 216
  f8:	3f 4f       	sbci	r19, 0xFF	; 255
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	82 0f       	add	r24, r18
 100:	93 1f       	adc	r25, r19
 102:	fc 01       	movw	r30, r24
 104:	80 81       	ld	r24, Z
 106:	ba 01       	movw	r22, r20
 108:	0e 94 70 02 	call	0x4e0	; 0x4e0 <EEPROM_writeData>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	a0 ea       	ldi	r26, 0xA0	; 160
 112:	b1 e4       	ldi	r27, 0x41	; 65
 114:	88 8b       	std	Y+16, r24	; 0x10
 116:	99 8b       	std	Y+17, r25	; 0x11
 118:	aa 8b       	std	Y+18, r26	; 0x12
 11a:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	4a e7       	ldi	r20, 0x7A	; 122
 122:	55 e4       	ldi	r21, 0x45	; 69
 124:	68 89       	ldd	r22, Y+16	; 0x10
 126:	79 89       	ldd	r23, Y+17	; 0x11
 128:	8a 89       	ldd	r24, Y+18	; 0x12
 12a:	9b 89       	ldd	r25, Y+19	; 0x13
 12c:	0e 94 4c 07 	call	0xe98	; 0xe98 <__mulsf3>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	8c 8b       	std	Y+20, r24	; 0x14
 136:	9d 8b       	std	Y+21, r25	; 0x15
 138:	ae 8b       	std	Y+22, r26	; 0x16
 13a:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e8       	ldi	r20, 0x80	; 128
 142:	5f e3       	ldi	r21, 0x3F	; 63
 144:	6c 89       	ldd	r22, Y+20	; 0x14
 146:	7d 89       	ldd	r23, Y+21	; 0x15
 148:	8e 89       	ldd	r24, Y+22	; 0x16
 14a:	9f 89       	ldd	r25, Y+23	; 0x17
 14c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__cmpsf2>
 150:	88 23       	and	r24, r24
 152:	2c f4       	brge	.+10     	; 0x15e <main+0xcc>
		__ticks = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	99 8f       	std	Y+25, r25	; 0x19
 15a:	88 8f       	std	Y+24, r24	; 0x18
 15c:	3f c0       	rjmp	.+126    	; 0x1dc <main+0x14a>
	else if (__tmp > 65535)
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	3f ef       	ldi	r19, 0xFF	; 255
 162:	4f e7       	ldi	r20, 0x7F	; 127
 164:	57 e4       	ldi	r21, 0x47	; 71
 166:	6c 89       	ldd	r22, Y+20	; 0x14
 168:	7d 89       	ldd	r23, Y+21	; 0x15
 16a:	8e 89       	ldd	r24, Y+22	; 0x16
 16c:	9f 89       	ldd	r25, Y+23	; 0x17
 16e:	0e 94 47 07 	call	0xe8e	; 0xe8e <__gesf2>
 172:	18 16       	cp	r1, r24
 174:	4c f5       	brge	.+82     	; 0x1c8 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	40 e2       	ldi	r20, 0x20	; 32
 17c:	51 e4       	ldi	r21, 0x41	; 65
 17e:	68 89       	ldd	r22, Y+16	; 0x10
 180:	79 89       	ldd	r23, Y+17	; 0x11
 182:	8a 89       	ldd	r24, Y+18	; 0x12
 184:	9b 89       	ldd	r25, Y+19	; 0x13
 186:	0e 94 4c 07 	call	0xe98	; 0xe98 <__mulsf3>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	bc 01       	movw	r22, r24
 190:	cd 01       	movw	r24, r26
 192:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fixunssfsi>
 196:	dc 01       	movw	r26, r24
 198:	cb 01       	movw	r24, r22
 19a:	99 8f       	std	Y+25, r25	; 0x19
 19c:	88 8f       	std	Y+24, r24	; 0x18
 19e:	0f c0       	rjmp	.+30     	; 0x1be <main+0x12c>
 1a0:	80 e9       	ldi	r24, 0x90	; 144
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	9b 8f       	std	Y+27, r25	; 0x1b
 1a6:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
 1aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x11a>
 1b0:	9b 8f       	std	Y+27, r25	; 0x1b
 1b2:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b4:	88 8d       	ldd	r24, Y+24	; 0x18
 1b6:	99 8d       	ldd	r25, Y+25	; 0x19
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	99 8f       	std	Y+25, r25	; 0x19
 1bc:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1be:	88 8d       	ldd	r24, Y+24	; 0x18
 1c0:	99 8d       	ldd	r25, Y+25	; 0x19
 1c2:	89 2b       	or	r24, r25
 1c4:	69 f7       	brne	.-38     	; 0x1a0 <main+0x10e>
 1c6:	14 c0       	rjmp	.+40     	; 0x1f0 <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c8:	6c 89       	ldd	r22, Y+20	; 0x14
 1ca:	7d 89       	ldd	r23, Y+21	; 0x15
 1cc:	8e 89       	ldd	r24, Y+22	; 0x16
 1ce:	9f 89       	ldd	r25, Y+23	; 0x17
 1d0:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fixunssfsi>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	99 8f       	std	Y+25, r25	; 0x19
 1da:	88 8f       	std	Y+24, r24	; 0x18
 1dc:	88 8d       	ldd	r24, Y+24	; 0x18
 1de:	99 8d       	ldd	r25, Y+25	; 0x19
 1e0:	9d 8f       	std	Y+29, r25	; 0x1d
 1e2:	8c 8f       	std	Y+28, r24	; 0x1c
 1e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x156>
 1ec:	9d 8f       	std	Y+29, r25	; 0x1d
 1ee:	8c 8f       	std	Y+28, r24	; 0x1c
	
	u8 adminuser[5]="admin";
	u8 adminpassword[4]="1234";
	DIO_setPinDir(DIO_PIND3,DIO_OUTPUT);
	//saving admin username
	for(int b=0; b<5; b++)
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	9a 81       	ldd	r25, Y+2	; 0x02
 1fe:	05 97       	sbiw	r24, 0x05	; 5
 200:	0c f4       	brge	.+2      	; 0x204 <main+0x172>
 202:	76 cf       	rjmp	.-276    	; 0xf0 <main+0x5e>
	{
		EEPROM_writeData(adminuser[b],b);
		_delay_ms(20);

	}
	for(int b=0,j=5; b<4; b++,j++)
 204:	1c 82       	std	Y+4, r1	; 0x04
 206:	1b 82       	std	Y+3, r1	; 0x03
 208:	85 e0       	ldi	r24, 0x05	; 5
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	9e 83       	std	Y+6, r25	; 0x06
 20e:	8d 83       	std	Y+5, r24	; 0x05
 210:	8a c0       	rjmp	.+276    	; 0x326 <main+0x294>
	{
		EEPROM_writeData(adminpassword[b],j);
 212:	4d 81       	ldd	r20, Y+5	; 0x05
 214:	5e 81       	ldd	r21, Y+6	; 0x06
 216:	9e 01       	movw	r18, r28
 218:	23 5d       	subi	r18, 0xD3	; 211
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	82 0f       	add	r24, r18
 222:	93 1f       	adc	r25, r19
 224:	fc 01       	movw	r30, r24
 226:	80 81       	ld	r24, Z
 228:	ba 01       	movw	r22, r20
 22a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <EEPROM_writeData>
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	a0 ea       	ldi	r26, 0xA0	; 160
 234:	b1 e4       	ldi	r27, 0x41	; 65
 236:	8c 87       	std	Y+12, r24	; 0x0c
 238:	9d 87       	std	Y+13, r25	; 0x0d
 23a:	ae 87       	std	Y+14, r26	; 0x0e
 23c:	bf 87       	std	Y+15, r27	; 0x0f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	4a e7       	ldi	r20, 0x7A	; 122
 244:	55 e4       	ldi	r21, 0x45	; 69
 246:	6c 85       	ldd	r22, Y+12	; 0x0c
 248:	7d 85       	ldd	r23, Y+13	; 0x0d
 24a:	8e 85       	ldd	r24, Y+14	; 0x0e
 24c:	9f 85       	ldd	r25, Y+15	; 0x0f
 24e:	0e 94 4c 07 	call	0xe98	; 0xe98 <__mulsf3>
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	8e 8f       	std	Y+30, r24	; 0x1e
 258:	9f 8f       	std	Y+31, r25	; 0x1f
 25a:	a8 a3       	std	Y+32, r26	; 0x20
 25c:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	40 e8       	ldi	r20, 0x80	; 128
 264:	5f e3       	ldi	r21, 0x3F	; 63
 266:	6e 8d       	ldd	r22, Y+30	; 0x1e
 268:	7f 8d       	ldd	r23, Y+31	; 0x1f
 26a:	88 a1       	ldd	r24, Y+32	; 0x20
 26c:	99 a1       	ldd	r25, Y+33	; 0x21
 26e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__cmpsf2>
 272:	88 23       	and	r24, r24
 274:	2c f4       	brge	.+10     	; 0x280 <main+0x1ee>
		__ticks = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9b a3       	std	Y+35, r25	; 0x23
 27c:	8a a3       	std	Y+34, r24	; 0x22
 27e:	3f c0       	rjmp	.+126    	; 0x2fe <main+0x26c>
	else if (__tmp > 65535)
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	3f ef       	ldi	r19, 0xFF	; 255
 284:	4f e7       	ldi	r20, 0x7F	; 127
 286:	57 e4       	ldi	r21, 0x47	; 71
 288:	6e 8d       	ldd	r22, Y+30	; 0x1e
 28a:	7f 8d       	ldd	r23, Y+31	; 0x1f
 28c:	88 a1       	ldd	r24, Y+32	; 0x20
 28e:	99 a1       	ldd	r25, Y+33	; 0x21
 290:	0e 94 47 07 	call	0xe8e	; 0xe8e <__gesf2>
 294:	18 16       	cp	r1, r24
 296:	4c f5       	brge	.+82     	; 0x2ea <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e2       	ldi	r20, 0x20	; 32
 29e:	51 e4       	ldi	r21, 0x41	; 65
 2a0:	6c 85       	ldd	r22, Y+12	; 0x0c
 2a2:	7d 85       	ldd	r23, Y+13	; 0x0d
 2a4:	8e 85       	ldd	r24, Y+14	; 0x0e
 2a6:	9f 85       	ldd	r25, Y+15	; 0x0f
 2a8:	0e 94 4c 07 	call	0xe98	; 0xe98 <__mulsf3>
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	bc 01       	movw	r22, r24
 2b2:	cd 01       	movw	r24, r26
 2b4:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fixunssfsi>
 2b8:	dc 01       	movw	r26, r24
 2ba:	cb 01       	movw	r24, r22
 2bc:	9b a3       	std	Y+35, r25	; 0x23
 2be:	8a a3       	std	Y+34, r24	; 0x22
 2c0:	0f c0       	rjmp	.+30     	; 0x2e0 <main+0x24e>
 2c2:	80 e9       	ldi	r24, 0x90	; 144
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	9d a3       	std	Y+37, r25	; 0x25
 2c8:	8c a3       	std	Y+36, r24	; 0x24
 2ca:	8c a1       	ldd	r24, Y+36	; 0x24
 2cc:	9d a1       	ldd	r25, Y+37	; 0x25
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x23c>
 2d2:	9d a3       	std	Y+37, r25	; 0x25
 2d4:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d6:	8a a1       	ldd	r24, Y+34	; 0x22
 2d8:	9b a1       	ldd	r25, Y+35	; 0x23
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	9b a3       	std	Y+35, r25	; 0x23
 2de:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e0:	8a a1       	ldd	r24, Y+34	; 0x22
 2e2:	9b a1       	ldd	r25, Y+35	; 0x23
 2e4:	89 2b       	or	r24, r25
 2e6:	69 f7       	brne	.-38     	; 0x2c2 <main+0x230>
 2e8:	14 c0       	rjmp	.+40     	; 0x312 <main+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2ea:	6e 8d       	ldd	r22, Y+30	; 0x1e
 2ec:	7f 8d       	ldd	r23, Y+31	; 0x1f
 2ee:	88 a1       	ldd	r24, Y+32	; 0x20
 2f0:	99 a1       	ldd	r25, Y+33	; 0x21
 2f2:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fixunssfsi>
 2f6:	dc 01       	movw	r26, r24
 2f8:	cb 01       	movw	r24, r22
 2fa:	9b a3       	std	Y+35, r25	; 0x23
 2fc:	8a a3       	std	Y+34, r24	; 0x22
 2fe:	8a a1       	ldd	r24, Y+34	; 0x22
 300:	9b a1       	ldd	r25, Y+35	; 0x23
 302:	9f a3       	std	Y+39, r25	; 0x27
 304:	8e a3       	std	Y+38, r24	; 0x26
 306:	8e a1       	ldd	r24, Y+38	; 0x26
 308:	9f a1       	ldd	r25, Y+39	; 0x27
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0x278>
 30e:	9f a3       	std	Y+39, r25	; 0x27
 310:	8e a3       	std	Y+38, r24	; 0x26
	{
		EEPROM_writeData(adminuser[b],b);
		_delay_ms(20);

	}
	for(int b=0,j=5; b<4; b++,j++)
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	9c 81       	ldd	r25, Y+4	; 0x04
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	9c 83       	std	Y+4, r25	; 0x04
 31a:	8b 83       	std	Y+3, r24	; 0x03
 31c:	8d 81       	ldd	r24, Y+5	; 0x05
 31e:	9e 81       	ldd	r25, Y+6	; 0x06
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	9e 83       	std	Y+6, r25	; 0x06
 324:	8d 83       	std	Y+5, r24	; 0x05
 326:	8b 81       	ldd	r24, Y+3	; 0x03
 328:	9c 81       	ldd	r25, Y+4	; 0x04
 32a:	04 97       	sbiw	r24, 0x04	; 4
 32c:	0c f4       	brge	.+2      	; 0x330 <main+0x29e>
 32e:	71 cf       	rjmp	.-286    	; 0x212 <main+0x180>
		EEPROM_writeData(adminpassword[b],j);
		_delay_ms(20);

	}

	u8 datauser[10]="";
 330:	1a aa       	std	Y+50, r1	; 0x32
 332:	19 aa       	std	Y+49, r1	; 0x31
 334:	28 e0       	ldi	r18, 0x08	; 8
 336:	ce 01       	movw	r24, r28
 338:	c3 96       	adiw	r24, 0x33	; 51
 33a:	fc 01       	movw	r30, r24
 33c:	32 2f       	mov	r19, r18
 33e:	11 92       	st	Z+, r1
 340:	3a 95       	dec	r19
 342:	e9 f7       	brne	.-6      	; 0x33e <main+0x2ac>
	u8 datapass[10]="";
 344:	1c ae       	std	Y+60, r1	; 0x3c
 346:	1b ae       	std	Y+59, r1	; 0x3b
 348:	28 e0       	ldi	r18, 0x08	; 8
 34a:	ce 01       	movw	r24, r28
 34c:	cd 96       	adiw	r24, 0x3d	; 61
 34e:	fc 01       	movw	r30, r24
 350:	32 2f       	mov	r19, r18
 352:	11 92       	st	Z+, r1
 354:	3a 95       	dec	r19
 356:	e9 f7       	brne	.-6      	; 0x352 <main+0x2c0>

	u8 i=0,AUCcounter=0, APCcounter=0,c=0;
 358:	1f 82       	std	Y+7, r1	; 0x07
 35a:	18 86       	std	Y+8, r1	; 0x08
 35c:	19 86       	std	Y+9, r1	; 0x09
 35e:	1a 86       	std	Y+10, r1	; 0x0a
	u8 wrongPass=0;
 360:	1b 86       	std	Y+11, r1	; 0x0b

while (1)
{
UART_sendString("user=");
 362:	80 e6       	ldi	r24, 0x60	; 96
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_sendString>
 while (c!=0x3d)
 36a:	17 c0       	rjmp	.+46     	; 0x39a <main+0x308>
 {
	 c=UART_receiveData();
 36c:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_receiveData>
 370:	8a 87       	std	Y+10, r24	; 0x0a
	 if (c!=0x3d)
 372:	8a 85       	ldd	r24, Y+10	; 0x0a
 374:	8d 33       	cpi	r24, 0x3D	; 61
 376:	89 f0       	breq	.+34     	; 0x39a <main+0x308>
	 {
	 datauser[i]=c;
 378:	8f 81       	ldd	r24, Y+7	; 0x07
 37a:	88 2f       	mov	r24, r24
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	9e 01       	movw	r18, r28
 380:	2f 5c       	subi	r18, 0xCF	; 207
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	82 0f       	add	r24, r18
 386:	93 1f       	adc	r25, r19
 388:	2a 85       	ldd	r18, Y+10	; 0x0a
 38a:	fc 01       	movw	r30, r24
 38c:	20 83       	st	Z, r18
	 //UART_sendData(datauser[i]);
	 AUCcounter++;
 38e:	88 85       	ldd	r24, Y+8	; 0x08
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	88 87       	std	Y+8, r24	; 0x08
	 i++;
 394:	8f 81       	ldd	r24, Y+7	; 0x07
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	8f 83       	std	Y+7, r24	; 0x07
	u8 wrongPass=0;

while (1)
{
UART_sendString("user=");
 while (c!=0x3d)
 39a:	8a 85       	ldd	r24, Y+10	; 0x0a
 39c:	8d 33       	cpi	r24, 0x3D	; 61
 39e:	31 f7       	brne	.-52     	; 0x36c <main+0x2da>
	 //UART_sendData(datauser[i]);
	 AUCcounter++;
	 i++;
	 }
 }
	datauser[AUCcounter+1]='\0';
 3a0:	88 85       	ldd	r24, Y+8	; 0x08
 3a2:	88 2f       	mov	r24, r24
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	9e 01       	movw	r18, r28
 3aa:	2f 5c       	subi	r18, 0xCF	; 207
 3ac:	3f 4f       	sbci	r19, 0xFF	; 255
 3ae:	82 0f       	add	r24, r18
 3b0:	93 1f       	adc	r25, r19
 3b2:	fc 01       	movw	r30, r24
 3b4:	10 82       	st	Z, r1
  	 AUCcounter=0;
 3b6:	18 86       	std	Y+8, r1	; 0x08
  	 i=0;
 3b8:	1f 82       	std	Y+7, r1	; 0x07
  	 c=0;
 3ba:	1a 86       	std	Y+10, r1	; 0x0a
 UART_sendData(13);
 3bc:	8d e0       	ldi	r24, 0x0D	; 13
 3be:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>
 UART_sendData(10);
 3c2:	8a e0       	ldi	r24, 0x0A	; 10
 3c4:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>
 
 
UART_sendString("password=");
 3c8:	86 e6       	ldi	r24, 0x66	; 102
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_sendString>
while (c!=0x3d)
 3d0:	17 c0       	rjmp	.+46     	; 0x400 <__EEPROM_REGION_LENGTH__>
{
	c=UART_receiveData();
 3d2:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <UART_receiveData>
 3d6:	8a 87       	std	Y+10, r24	; 0x0a
	if (c!=0x3d)
 3d8:	8a 85       	ldd	r24, Y+10	; 0x0a
 3da:	8d 33       	cpi	r24, 0x3D	; 61
 3dc:	89 f0       	breq	.+34     	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		datapass[i]=c;
 3de:	8f 81       	ldd	r24, Y+7	; 0x07
 3e0:	88 2f       	mov	r24, r24
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	9e 01       	movw	r18, r28
 3e6:	25 5c       	subi	r18, 0xC5	; 197
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ea:	82 0f       	add	r24, r18
 3ec:	93 1f       	adc	r25, r19
 3ee:	2a 85       	ldd	r18, Y+10	; 0x0a
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
		//UART_sendData(datauser[i]);
		APCcounter++;
 3f4:	89 85       	ldd	r24, Y+9	; 0x09
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	89 87       	std	Y+9, r24	; 0x09
		i++;
 3fa:	8f 81       	ldd	r24, Y+7	; 0x07
 3fc:	8f 5f       	subi	r24, 0xFF	; 255
 3fe:	8f 83       	std	Y+7, r24	; 0x07
 UART_sendData(13);
 UART_sendData(10);
 
 
UART_sendString("password=");
while (c!=0x3d)
 400:	8a 85       	ldd	r24, Y+10	; 0x0a
 402:	8d 33       	cpi	r24, 0x3D	; 61
 404:	31 f7       	brne	.-52     	; 0x3d2 <main+0x340>
		//UART_sendData(datauser[i]);
		APCcounter++;
		i++;
	}
}
datapass[APCcounter+1]='\0';
 406:	89 85       	ldd	r24, Y+9	; 0x09
 408:	88 2f       	mov	r24, r24
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	9e 01       	movw	r18, r28
 410:	25 5c       	subi	r18, 0xC5	; 197
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	82 0f       	add	r24, r18
 416:	93 1f       	adc	r25, r19
 418:	fc 01       	movw	r30, r24
 41a:	10 82       	st	Z, r1
APCcounter=0;
 41c:	19 86       	std	Y+9, r1	; 0x09
i=0;
 41e:	1f 82       	std	Y+7, r1	; 0x07
c=0;
 420:	1a 86       	std	Y+10, r1	; 0x0a
UART_sendData(13);
 422:	8d e0       	ldi	r24, 0x0D	; 13
 424:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>
UART_sendData(10);
 428:	8a e0       	ldi	r24, 0x0A	; 10
 42a:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>


UART_sendData(13);
 42e:	8d e0       	ldi	r24, 0x0D	; 13
 430:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>
UART_sendData(10);
 434:	8a e0       	ldi	r24, 0x0A	; 10
 436:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>
 if((datauser[0]==EEPROM_readData(0))
 43a:	19 a9       	ldd	r17, Y+49	; 0x31
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 444:	18 17       	cp	r17, r24
 446:	09 f0       	breq	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	3d c0       	rjmp	.+122    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 &&(datauser[1]==EEPROM_readData(1))
 44a:	1a a9       	ldd	r17, Y+50	; 0x32
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 454:	18 17       	cp	r17, r24
 456:	b1 f5       	brne	.+108    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 &&(datauser[2]==EEPROM_readData(2))
 458:	1b a9       	ldd	r17, Y+51	; 0x33
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 462:	18 17       	cp	r17, r24
 464:	79 f5       	brne	.+94     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 &&(datauser[3]==EEPROM_readData(3))
 466:	1c a9       	ldd	r17, Y+52	; 0x34
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 470:	18 17       	cp	r17, r24
 472:	41 f5       	brne	.+80     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 &&(datauser[4]==EEPROM_readData(4))
 474:	1d a9       	ldd	r17, Y+53	; 0x35
 476:	84 e0       	ldi	r24, 0x04	; 4
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 47e:	18 17       	cp	r17, r24
 480:	09 f5       	brne	.+66     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 &&(datapass[0]==EEPROM_readData(5))
 482:	1b ad       	ldd	r17, Y+59	; 0x3b
 484:	85 e0       	ldi	r24, 0x05	; 5
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 48c:	18 17       	cp	r17, r24
 48e:	d1 f4       	brne	.+52     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 &&(datapass[1]==EEPROM_readData(6))
 490:	1c ad       	ldd	r17, Y+60	; 0x3c
 492:	86 e0       	ldi	r24, 0x06	; 6
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 49a:	18 17       	cp	r17, r24
 49c:	99 f4       	brne	.+38     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 &&(datapass[2]==EEPROM_readData(7))
 49e:	1d ad       	ldd	r17, Y+61	; 0x3d
 4a0:	87 e0       	ldi	r24, 0x07	; 7
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 4a8:	18 17       	cp	r17, r24
 4aa:	61 f4       	brne	.+24     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 &&(datapass[3]==EEPROM_readData(8))
 4ac:	1e ad       	ldd	r17, Y+62	; 0x3e
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <EEPROM_readData>
 4b6:	18 17       	cp	r17, r24
 4b8:	29 f4       	brne	.+10     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
)
 {
	UART_sendString("Welcome Home");
 4ba:	80 e7       	ldi	r24, 0x70	; 112
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_sendString>
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 }
 else
 {
   	UART_sendString("Wrong Username or Password");
 4c4:	8d e7       	ldi	r24, 0x7D	; 125
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 51 06 	call	0xca2	; 0xca2 <UART_sendString>
    wrongPass++;
 4cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	8b 87       	std	Y+11, r24	; 0x0b
 }

  UART_sendData(13);
 4d2:	8d e0       	ldi	r24, 0x0D	; 13
 4d4:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>
  UART_sendData(10);
 4d8:	8a e0       	ldi	r24, 0x0A	; 10
 4da:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>
}
 4de:	41 cf       	rjmp	.-382    	; 0x362 <main+0x2d0>

000004e0 <EEPROM_writeData>:
#include "BIT_MATH.h"
#include "STD_TYPES.h"
#include "I2C_INT.h"
#include "EEPROM_INT.h"
void EEPROM_writeData(u8 data, u16 location)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	27 97       	sbiw	r28, 0x07	; 7
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	f8 94       	cli
 4ee:	de bf       	out	0x3e, r29	; 62
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	cd bf       	out	0x3d, r28	; 61
 4f4:	8d 83       	std	Y+5, r24	; 0x05
 4f6:	7f 83       	std	Y+7, r23	; 0x07
 4f8:	6e 83       	std	Y+6, r22	; 0x06
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 4fa:	86 e5       	ldi	r24, 0x56	; 86
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	24 ea       	ldi	r18, 0xA4	; 164
 500:	fc 01       	movw	r30, r24
 502:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 504:	00 00       	nop
 506:	86 e5       	ldi	r24, 0x56	; 86
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	fc 01       	movw	r30, r24
 50c:	80 81       	ld	r24, Z
 50e:	88 1f       	adc	r24, r24
 510:	88 27       	eor	r24, r24
 512:	88 1f       	adc	r24, r24
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	81 70       	andi	r24, 0x01	; 1
 51a:	99 27       	eor	r25, r25
 51c:	89 2b       	or	r24, r25
 51e:	99 f3       	breq	.-26     	; 0x506 <EEPROM_writeData+0x26>
	
	//address(1010)_3bitLocation_w
	u16 x = location & (0b11100000000);
 520:	8e 81       	ldd	r24, Y+6	; 0x06
 522:	9f 81       	ldd	r25, Y+7	; 0x07
 524:	88 27       	eor	r24, r24
 526:	97 70       	andi	r25, 0x07	; 7
 528:	9a 83       	std	Y+2, r25	; 0x02
 52a:	89 83       	std	Y+1, r24	; 0x01
	u8 y = x>>7;
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	9a 81       	ldd	r25, Y+2	; 0x02
 530:	88 0f       	add	r24, r24
 532:	89 2f       	mov	r24, r25
 534:	88 1f       	adc	r24, r24
 536:	99 0b       	sbc	r25, r25
 538:	91 95       	neg	r25
 53a:	8b 83       	std	Y+3, r24	; 0x03
	u8 result  = y | 0b10100000;
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	80 6a       	ori	r24, 0xA0	; 160
 540:	8c 83       	std	Y+4, r24	; 0x04
	TWDR = result;
 542:	83 e2       	ldi	r24, 0x23	; 35
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	2c 81       	ldd	r18, Y+4	; 0x04
 548:	fc 01       	movw	r30, r24
 54a:	20 83       	st	Z, r18
	
	TWCR = (1<<TWINT) | (1<<TWEN);
 54c:	86 e5       	ldi	r24, 0x56	; 86
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	24 e8       	ldi	r18, 0x84	; 132
 552:	fc 01       	movw	r30, r24
 554:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 556:	00 00       	nop
 558:	86 e5       	ldi	r24, 0x56	; 86
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	fc 01       	movw	r30, r24
 55e:	80 81       	ld	r24, Z
 560:	88 1f       	adc	r24, r24
 562:	88 27       	eor	r24, r24
 564:	88 1f       	adc	r24, r24
 566:	88 2f       	mov	r24, r24
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	81 70       	andi	r24, 0x01	; 1
 56c:	99 27       	eor	r25, r25
 56e:	89 2b       	or	r24, r25
 570:	99 f3       	breq	.-26     	; 0x558 <EEPROM_writeData+0x78>
	
	//8bitLocation
	TWDR = (u8)location;
 572:	83 e2       	ldi	r24, 0x23	; 35
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	2e 81       	ldd	r18, Y+6	; 0x06
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 57c:	86 e5       	ldi	r24, 0x56	; 86
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	24 e8       	ldi	r18, 0x84	; 132
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 586:	00 00       	nop
 588:	86 e5       	ldi	r24, 0x56	; 86
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	80 81       	ld	r24, Z
 590:	88 1f       	adc	r24, r24
 592:	88 27       	eor	r24, r24
 594:	88 1f       	adc	r24, r24
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	81 70       	andi	r24, 0x01	; 1
 59c:	99 27       	eor	r25, r25
 59e:	89 2b       	or	r24, r25
 5a0:	99 f3       	breq	.-26     	; 0x588 <EEPROM_writeData+0xa8>
	
	//send data
	TWDR = data;
 5a2:	83 e2       	ldi	r24, 0x23	; 35
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	2d 81       	ldd	r18, Y+5	; 0x05
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 5ac:	86 e5       	ldi	r24, 0x56	; 86
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	24 e8       	ldi	r18, 0x84	; 132
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 5b6:	00 00       	nop
 5b8:	86 e5       	ldi	r24, 0x56	; 86
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	fc 01       	movw	r30, r24
 5be:	80 81       	ld	r24, Z
 5c0:	88 1f       	adc	r24, r24
 5c2:	88 27       	eor	r24, r24
 5c4:	88 1f       	adc	r24, r24
 5c6:	88 2f       	mov	r24, r24
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	81 70       	andi	r24, 0x01	; 1
 5cc:	99 27       	eor	r25, r25
 5ce:	89 2b       	or	r24, r25
 5d0:	99 f3       	breq	.-26     	; 0x5b8 <EEPROM_writeData+0xd8>
	
	//send stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 5d2:	86 e5       	ldi	r24, 0x56	; 86
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	24 e9       	ldi	r18, 0x94	; 148
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
}
 5dc:	00 00       	nop
 5de:	27 96       	adiw	r28, 0x07	; 7
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <EEPROM_readData>:
u8 EEPROM_readData(u16 location)
{
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	27 97       	sbiw	r28, 0x07	; 7
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	f8 94       	cli
 5fe:	de bf       	out	0x3e, r29	; 62
 600:	0f be       	out	0x3f, r0	; 63
 602:	cd bf       	out	0x3d, r28	; 61
 604:	9f 83       	std	Y+7, r25	; 0x07
 606:	8e 83       	std	Y+6, r24	; 0x06
	/////dummy write/////
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 608:	86 e5       	ldi	r24, 0x56	; 86
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	24 ea       	ldi	r18, 0xA4	; 164
 60e:	fc 01       	movw	r30, r24
 610:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 612:	00 00       	nop
 614:	86 e5       	ldi	r24, 0x56	; 86
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	fc 01       	movw	r30, r24
 61a:	80 81       	ld	r24, Z
 61c:	88 1f       	adc	r24, r24
 61e:	88 27       	eor	r24, r24
 620:	88 1f       	adc	r24, r24
 622:	88 2f       	mov	r24, r24
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	81 70       	andi	r24, 0x01	; 1
 628:	99 27       	eor	r25, r25
 62a:	89 2b       	or	r24, r25
 62c:	99 f3       	breq	.-26     	; 0x614 <EEPROM_readData+0x24>
	
	//address(1010)_3bitLocation_w
	u16 x = location & (0b11100000000);
 62e:	8e 81       	ldd	r24, Y+6	; 0x06
 630:	9f 81       	ldd	r25, Y+7	; 0x07
 632:	88 27       	eor	r24, r24
 634:	97 70       	andi	r25, 0x07	; 7
 636:	9a 83       	std	Y+2, r25	; 0x02
 638:	89 83       	std	Y+1, r24	; 0x01
	u8 y = x>>7;
 63a:	89 81       	ldd	r24, Y+1	; 0x01
 63c:	9a 81       	ldd	r25, Y+2	; 0x02
 63e:	88 0f       	add	r24, r24
 640:	89 2f       	mov	r24, r25
 642:	88 1f       	adc	r24, r24
 644:	99 0b       	sbc	r25, r25
 646:	91 95       	neg	r25
 648:	8b 83       	std	Y+3, r24	; 0x03
	u8 result  = y | 0b10100000;
 64a:	8b 81       	ldd	r24, Y+3	; 0x03
 64c:	80 6a       	ori	r24, 0xA0	; 160
 64e:	8c 83       	std	Y+4, r24	; 0x04
	TWDR = result;
 650:	83 e2       	ldi	r24, 0x23	; 35
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	2c 81       	ldd	r18, Y+4	; 0x04
 656:	fc 01       	movw	r30, r24
 658:	20 83       	st	Z, r18
	
	TWCR = (1<<TWINT) | (1<<TWEN);
 65a:	86 e5       	ldi	r24, 0x56	; 86
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	24 e8       	ldi	r18, 0x84	; 132
 660:	fc 01       	movw	r30, r24
 662:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 664:	00 00       	nop
 666:	86 e5       	ldi	r24, 0x56	; 86
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	fc 01       	movw	r30, r24
 66c:	80 81       	ld	r24, Z
 66e:	88 1f       	adc	r24, r24
 670:	88 27       	eor	r24, r24
 672:	88 1f       	adc	r24, r24
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	81 70       	andi	r24, 0x01	; 1
 67a:	99 27       	eor	r25, r25
 67c:	89 2b       	or	r24, r25
 67e:	99 f3       	breq	.-26     	; 0x666 <EEPROM_readData+0x76>
	
	//8bitLocation
	TWDR = (u8)location;
 680:	83 e2       	ldi	r24, 0x23	; 35
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	2e 81       	ldd	r18, Y+6	; 0x06
 686:	fc 01       	movw	r30, r24
 688:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 68a:	86 e5       	ldi	r24, 0x56	; 86
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	24 e8       	ldi	r18, 0x84	; 132
 690:	fc 01       	movw	r30, r24
 692:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 694:	00 00       	nop
 696:	86 e5       	ldi	r24, 0x56	; 86
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	fc 01       	movw	r30, r24
 69c:	80 81       	ld	r24, Z
 69e:	88 1f       	adc	r24, r24
 6a0:	88 27       	eor	r24, r24
 6a2:	88 1f       	adc	r24, r24
 6a4:	88 2f       	mov	r24, r24
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	81 70       	andi	r24, 0x01	; 1
 6aa:	99 27       	eor	r25, r25
 6ac:	89 2b       	or	r24, r25
 6ae:	99 f3       	breq	.-26     	; 0x696 <EEPROM_readData+0xa6>
	
	//send start
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 6b0:	86 e5       	ldi	r24, 0x56	; 86
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	24 ea       	ldi	r18, 0xA4	; 164
 6b6:	fc 01       	movw	r30, r24
 6b8:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 6ba:	00 00       	nop
 6bc:	86 e5       	ldi	r24, 0x56	; 86
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	fc 01       	movw	r30, r24
 6c2:	80 81       	ld	r24, Z
 6c4:	88 1f       	adc	r24, r24
 6c6:	88 27       	eor	r24, r24
 6c8:	88 1f       	adc	r24, r24
 6ca:	88 2f       	mov	r24, r24
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	81 70       	andi	r24, 0x01	; 1
 6d0:	99 27       	eor	r25, r25
 6d2:	89 2b       	or	r24, r25
 6d4:	99 f3       	breq	.-26     	; 0x6bc <EEPROM_readData+0xcc>
	
	//address(1010_3bitLocation_r
	x = location & (0b11100000000);
 6d6:	8e 81       	ldd	r24, Y+6	; 0x06
 6d8:	9f 81       	ldd	r25, Y+7	; 0x07
 6da:	88 27       	eor	r24, r24
 6dc:	97 70       	andi	r25, 0x07	; 7
 6de:	9a 83       	std	Y+2, r25	; 0x02
 6e0:	89 83       	std	Y+1, r24	; 0x01
	y = x>>7;
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	9a 81       	ldd	r25, Y+2	; 0x02
 6e6:	88 0f       	add	r24, r24
 6e8:	89 2f       	mov	r24, r25
 6ea:	88 1f       	adc	r24, r24
 6ec:	99 0b       	sbc	r25, r25
 6ee:	91 95       	neg	r25
 6f0:	8b 83       	std	Y+3, r24	; 0x03
	result  = y | 0b10100001;
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	81 6a       	ori	r24, 0xA1	; 161
 6f6:	8c 83       	std	Y+4, r24	; 0x04
	TWDR = result;
 6f8:	83 e2       	ldi	r24, 0x23	; 35
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	2c 81       	ldd	r18, Y+4	; 0x04
 6fe:	fc 01       	movw	r30, r24
 700:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 702:	86 e5       	ldi	r24, 0x56	; 86
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	24 e8       	ldi	r18, 0x84	; 132
 708:	fc 01       	movw	r30, r24
 70a:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 70c:	00 00       	nop
 70e:	86 e5       	ldi	r24, 0x56	; 86
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	fc 01       	movw	r30, r24
 714:	80 81       	ld	r24, Z
 716:	88 1f       	adc	r24, r24
 718:	88 27       	eor	r24, r24
 71a:	88 1f       	adc	r24, r24
 71c:	88 2f       	mov	r24, r24
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	81 70       	andi	r24, 0x01	; 1
 722:	99 27       	eor	r25, r25
 724:	89 2b       	or	r24, r25
 726:	99 f3       	breq	.-26     	; 0x70e <EEPROM_readData+0x11e>
	
	//read data -> NACK
	TWCR = (1<<TWINT) | (1<<TWEN);
 728:	86 e5       	ldi	r24, 0x56	; 86
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	24 e8       	ldi	r18, 0x84	; 132
 72e:	fc 01       	movw	r30, r24
 730:	20 83       	st	Z, r18
	while( GET_BIT(TWCR,TWINT) ==0 );
 732:	00 00       	nop
 734:	86 e5       	ldi	r24, 0x56	; 86
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	fc 01       	movw	r30, r24
 73a:	80 81       	ld	r24, Z
 73c:	88 1f       	adc	r24, r24
 73e:	88 27       	eor	r24, r24
 740:	88 1f       	adc	r24, r24
 742:	88 2f       	mov	r24, r24
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	81 70       	andi	r24, 0x01	; 1
 748:	99 27       	eor	r25, r25
 74a:	89 2b       	or	r24, r25
 74c:	99 f3       	breq	.-26     	; 0x734 <EEPROM_readData+0x144>
	u8 data = TWDR;
 74e:	83 e2       	ldi	r24, 0x23	; 35
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	fc 01       	movw	r30, r24
 754:	80 81       	ld	r24, Z
 756:	8d 83       	std	Y+5, r24	; 0x05
	
	//send stop
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 758:	86 e5       	ldi	r24, 0x56	; 86
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	24 e9       	ldi	r18, 0x94	; 148
 75e:	fc 01       	movw	r30, r24
 760:	20 83       	st	Z, r18
	
	return data;
 762:	8d 81       	ldd	r24, Y+5	; 0x05

 764:	27 96       	adiw	r28, 0x07	; 7
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <DIO_setPinDir>:
		  	CLEAR_BIT(PORTD,pinNum);
	  	}
  	}
	
}
void DIO_setPinDir(u8 pinNum, u8 state){
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	00 d0       	rcall	.+0      	; 0x77c <DIO_setPinDir+0x6>
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	6a 83       	std	Y+2, r22	; 0x02
		if (pinNum>=0 && pinNum<=7)
 784:	89 81       	ldd	r24, Y+1	; 0x01
 786:	88 30       	cpi	r24, 0x08	; 8
 788:	90 f5       	brcc	.+100    	; 0x7ee <DIO_setPinDir+0x78>
	{
		if (state==DIO_OUTPUT)
 78a:	8a 81       	ldd	r24, Y+2	; 0x02
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	a9 f4       	brne	.+42     	; 0x7ba <DIO_setPinDir+0x44>
		{
			SET_BIT(DDRA,pinNum);
 790:	8a e3       	ldi	r24, 0x3A	; 58
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	2a e3       	ldi	r18, 0x3A	; 58
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	f9 01       	movw	r30, r18
 79a:	20 81       	ld	r18, Z
 79c:	62 2f       	mov	r22, r18
 79e:	29 81       	ldd	r18, Y+1	; 0x01
 7a0:	42 2f       	mov	r20, r18
 7a2:	50 e0       	ldi	r21, 0x00	; 0
 7a4:	21 e0       	ldi	r18, 0x01	; 1
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_setPinDir+0x38>
 7aa:	22 0f       	add	r18, r18
 7ac:	33 1f       	adc	r19, r19
 7ae:	4a 95       	dec	r20
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_setPinDir+0x34>
 7b2:	26 2b       	or	r18, r22
 7b4:	fc 01       	movw	r30, r24
 7b6:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
 7b8:	cd c0       	rjmp	.+410    	; 0x954 <__stack+0xf5>
	{
		if (state==DIO_OUTPUT)
		{
			SET_BIT(DDRA,pinNum);
		}
		else if (state==DIO_INPUT)
 7ba:	8a 81       	ldd	r24, Y+2	; 0x02
 7bc:	88 23       	and	r24, r24
 7be:	09 f0       	breq	.+2      	; 0x7c2 <DIO_setPinDir+0x4c>
 7c0:	c9 c0       	rjmp	.+402    	; 0x954 <__stack+0xf5>
		{
			CLEAR_BIT(DDRA,pinNum);
 7c2:	8a e3       	ldi	r24, 0x3A	; 58
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	2a e3       	ldi	r18, 0x3A	; 58
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	f9 01       	movw	r30, r18
 7cc:	20 81       	ld	r18, Z
 7ce:	62 2f       	mov	r22, r18
 7d0:	29 81       	ldd	r18, Y+1	; 0x01
 7d2:	42 2f       	mov	r20, r18
 7d4:	50 e0       	ldi	r21, 0x00	; 0
 7d6:	21 e0       	ldi	r18, 0x01	; 1
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_setPinDir+0x6a>
 7dc:	22 0f       	add	r18, r18
 7de:	33 1f       	adc	r19, r19
 7e0:	4a 95       	dec	r20
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DIO_setPinDir+0x66>
 7e4:	20 95       	com	r18
 7e6:	26 23       	and	r18, r22
 7e8:	fc 01       	movw	r30, r24
 7ea:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
 7ec:	b3 c0       	rjmp	.+358    	; 0x954 <__stack+0xf5>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRA,pinNum);
		}
	}
	else if (pinNum>=8 && pinNum<=15)
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	88 30       	cpi	r24, 0x08	; 8
 7f2:	c0 f1       	brcs	.+112    	; 0x864 <__stack+0x5>
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	80 31       	cpi	r24, 0x10	; 16
 7f8:	a8 f5       	brcc	.+106    	; 0x864 <__stack+0x5>
	{
		pinNum-=8;
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	88 50       	subi	r24, 0x08	; 8
 7fe:	89 83       	std	Y+1, r24	; 0x01
				if (state==DIO_OUTPUT)
 800:	8a 81       	ldd	r24, Y+2	; 0x02
 802:	81 30       	cpi	r24, 0x01	; 1
 804:	a9 f4       	brne	.+42     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		{
			SET_BIT(DDRB,pinNum);
 806:	87 e3       	ldi	r24, 0x37	; 55
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	27 e3       	ldi	r18, 0x37	; 55
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	f9 01       	movw	r30, r18
 810:	20 81       	ld	r18, Z
 812:	62 2f       	mov	r22, r18
 814:	29 81       	ldd	r18, Y+1	; 0x01
 816:	42 2f       	mov	r20, r18
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	21 e0       	ldi	r18, 0x01	; 1
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	22 0f       	add	r18, r18
 822:	33 1f       	adc	r19, r19
 824:	4a 95       	dec	r20
 826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 828:	26 2b       	or	r18, r22
 82a:	fc 01       	movw	r30, r24
 82c:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
 82e:	8f c0       	rjmp	.+286    	; 0x94e <__stack+0xef>
		{
			SET_BIT(DDRB,pinNum);
		}
		else if (state==DIO_INPUT)
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	88 23       	and	r24, r24
 834:	09 f0       	breq	.+2      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 836:	8b c0       	rjmp	.+278    	; 0x94e <__stack+0xef>
		{
			CLEAR_BIT(DDRB,pinNum);
 838:	87 e3       	ldi	r24, 0x37	; 55
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	27 e3       	ldi	r18, 0x37	; 55
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	f9 01       	movw	r30, r18
 842:	20 81       	ld	r18, Z
 844:	62 2f       	mov	r22, r18
 846:	29 81       	ldd	r18, Y+1	; 0x01
 848:	42 2f       	mov	r20, r18
 84a:	50 e0       	ldi	r21, 0x00	; 0
 84c:	21 e0       	ldi	r18, 0x01	; 1
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 852:	22 0f       	add	r18, r18
 854:	33 1f       	adc	r19, r19
 856:	4a 95       	dec	r20
 858:	e2 f7       	brpl	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 85a:	20 95       	com	r18
 85c:	26 23       	and	r18, r22
 85e:	fc 01       	movw	r30, r24
 860:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
 862:	75 c0       	rjmp	.+234    	; 0x94e <__stack+0xef>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRB,pinNum);
		}
	}
	else if (pinNum>=16 && pinNum<=23)
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	80 31       	cpi	r24, 0x10	; 16
 868:	c0 f1       	brcs	.+112    	; 0x8da <__stack+0x7b>
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	88 31       	cpi	r24, 0x18	; 24
 86e:	a8 f5       	brcc	.+106    	; 0x8da <__stack+0x7b>
	{
		pinNum-=16;
 870:	89 81       	ldd	r24, Y+1	; 0x01
 872:	80 51       	subi	r24, 0x10	; 16
 874:	89 83       	std	Y+1, r24	; 0x01
		if (state==DIO_OUTPUT)
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	81 30       	cpi	r24, 0x01	; 1
 87a:	a9 f4       	brne	.+42     	; 0x8a6 <__stack+0x47>
		{
			SET_BIT(DDRC,pinNum);
 87c:	84 e3       	ldi	r24, 0x34	; 52
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	24 e3       	ldi	r18, 0x34	; 52
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	f9 01       	movw	r30, r18
 886:	20 81       	ld	r18, Z
 888:	62 2f       	mov	r22, r18
 88a:	29 81       	ldd	r18, Y+1	; 0x01
 88c:	42 2f       	mov	r20, r18
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	21 e0       	ldi	r18, 0x01	; 1
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
 896:	22 0f       	add	r18, r18
 898:	33 1f       	adc	r19, r19
 89a:	4a 95       	dec	r20
 89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
 89e:	26 2b       	or	r18, r22
 8a0:	fc 01       	movw	r30, r24
 8a2:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
 8a4:	56 c0       	rjmp	.+172    	; 0x952 <__stack+0xf3>
		{
			SET_BIT(DDRC,pinNum);
		}
		else if (state==DIO_INPUT)
 8a6:	8a 81       	ldd	r24, Y+2	; 0x02
 8a8:	88 23       	and	r24, r24
 8aa:	09 f0       	breq	.+2      	; 0x8ae <__stack+0x4f>
 8ac:	52 c0       	rjmp	.+164    	; 0x952 <__stack+0xf3>
		{
			CLEAR_BIT(DDRC,pinNum);
 8ae:	84 e3       	ldi	r24, 0x34	; 52
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	24 e3       	ldi	r18, 0x34	; 52
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	f9 01       	movw	r30, r18
 8b8:	20 81       	ld	r18, Z
 8ba:	62 2f       	mov	r22, r18
 8bc:	29 81       	ldd	r18, Y+1	; 0x01
 8be:	42 2f       	mov	r20, r18
 8c0:	50 e0       	ldi	r21, 0x00	; 0
 8c2:	21 e0       	ldi	r18, 0x01	; 1
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	22 0f       	add	r18, r18
 8ca:	33 1f       	adc	r19, r19
 8cc:	4a 95       	dec	r20
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
 8d0:	20 95       	com	r18
 8d2:	26 23       	and	r18, r22
 8d4:	fc 01       	movw	r30, r24
 8d6:	20 83       	st	Z, r18
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
 8d8:	3c c0       	rjmp	.+120    	; 0x952 <__stack+0xf3>
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRC,pinNum);
		}
	}
	else if (pinNum>=24 && pinNum<=31)
 8da:	89 81       	ldd	r24, Y+1	; 0x01
 8dc:	88 31       	cpi	r24, 0x18	; 24
 8de:	d0 f1       	brcs	.+116    	; 0x954 <__stack+0xf5>
 8e0:	89 81       	ldd	r24, Y+1	; 0x01
 8e2:	80 32       	cpi	r24, 0x20	; 32
 8e4:	b8 f5       	brcc	.+110    	; 0x954 <__stack+0xf5>
	{
		pinNum-=24;
 8e6:	89 81       	ldd	r24, Y+1	; 0x01
 8e8:	88 51       	subi	r24, 0x18	; 24
 8ea:	89 83       	std	Y+1, r24	; 0x01
		if (state==DIO_OUTPUT)
 8ec:	8a 81       	ldd	r24, Y+2	; 0x02
 8ee:	81 30       	cpi	r24, 0x01	; 1
 8f0:	a9 f4       	brne	.+42     	; 0x91c <__stack+0xbd>
		{
			SET_BIT(DDRD,pinNum);
 8f2:	81 e3       	ldi	r24, 0x31	; 49
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	21 e3       	ldi	r18, 0x31	; 49
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	f9 01       	movw	r30, r18
 8fc:	20 81       	ld	r18, Z
 8fe:	62 2f       	mov	r22, r18
 900:	29 81       	ldd	r18, Y+1	; 0x01
 902:	42 2f       	mov	r20, r18
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	21 e0       	ldi	r18, 0x01	; 1
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0xb1>
 90c:	22 0f       	add	r18, r18
 90e:	33 1f       	adc	r19, r19
 910:	4a 95       	dec	r20
 912:	e2 f7       	brpl	.-8      	; 0x90c <__stack+0xad>
 914:	26 2b       	or	r18, r22
 916:	fc 01       	movw	r30, r24
 918:	20 83       	st	Z, r18
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
 91a:	1c c0       	rjmp	.+56     	; 0x954 <__stack+0xf5>
		pinNum-=24;
		if (state==DIO_OUTPUT)
		{
			SET_BIT(DDRD,pinNum);
		}
		else if (state==DIO_INPUT)
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	88 23       	and	r24, r24
 920:	c9 f4       	brne	.+50     	; 0x954 <__stack+0xf5>
		{
			CLEAR_BIT(DDRD,pinNum);
 922:	81 e3       	ldi	r24, 0x31	; 49
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	21 e3       	ldi	r18, 0x31	; 49
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	f9 01       	movw	r30, r18
 92c:	20 81       	ld	r18, Z
 92e:	62 2f       	mov	r22, r18
 930:	29 81       	ldd	r18, Y+1	; 0x01
 932:	42 2f       	mov	r20, r18
 934:	50 e0       	ldi	r21, 0x00	; 0
 936:	21 e0       	ldi	r18, 0x01	; 1
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0xe1>
 93c:	22 0f       	add	r18, r18
 93e:	33 1f       	adc	r19, r19
 940:	4a 95       	dec	r20
 942:	e2 f7       	brpl	.-8      	; 0x93c <__stack+0xdd>
 944:	20 95       	com	r18
 946:	26 23       	and	r18, r22
 948:	fc 01       	movw	r30, r24
 94a:	20 83       	st	Z, r18
		}
	}
}
 94c:	03 c0       	rjmp	.+6      	; 0x954 <__stack+0xf5>
		}
	}
	else if (pinNum>=8 && pinNum<=15)
	{
		pinNum-=8;
				if (state==DIO_OUTPUT)
 94e:	00 00       	nop
 950:	01 c0       	rjmp	.+2      	; 0x954 <__stack+0xf5>
		}
	}
	else if (pinNum>=16 && pinNum<=23)
	{
		pinNum-=16;
		if (state==DIO_OUTPUT)
 952:	00 00       	nop
		else if (state==DIO_INPUT)
		{
			CLEAR_BIT(DDRD,pinNum);
		}
	}
}
 954:	00 00       	nop
 956:	0f 90       	pop	r0
 958:	0f 90       	pop	r0
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	08 95       	ret

00000960 <__vector_1>:

void EXT_setCallbackInt2(void (*ptr)())
{
	//INT0_ptr = APP_func;
	INT2_ptr = ptr;
}
 960:	1f 92       	push	r1
 962:	0f 92       	push	r0
 964:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
 96c:	2f 93       	push	r18
 96e:	3f 93       	push	r19
 970:	4f 93       	push	r20
 972:	5f 93       	push	r21
 974:	6f 93       	push	r22
 976:	7f 93       	push	r23
 978:	8f 93       	push	r24
 97a:	9f 93       	push	r25
 97c:	af 93       	push	r26
 97e:	bf 93       	push	r27
 980:	ef 93       	push	r30
 982:	ff 93       	push	r31
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
 98c:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
 990:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__data_end+0x1>
 994:	fc 01       	movw	r30, r24
 996:	09 95       	icall
 998:	00 00       	nop
 99a:	df 91       	pop	r29
 99c:	cf 91       	pop	r28
 99e:	ff 91       	pop	r31
 9a0:	ef 91       	pop	r30
 9a2:	bf 91       	pop	r27
 9a4:	af 91       	pop	r26
 9a6:	9f 91       	pop	r25
 9a8:	8f 91       	pop	r24
 9aa:	7f 91       	pop	r23
 9ac:	6f 91       	pop	r22
 9ae:	5f 91       	pop	r21
 9b0:	4f 91       	pop	r20
 9b2:	3f 91       	pop	r19
 9b4:	2f 91       	pop	r18
 9b6:	0f 90       	pop	r0
 9b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 9bc:	0f 90       	pop	r0
 9be:	1f 90       	pop	r1
 9c0:	18 95       	reti

000009c2 <__vector_2>:
 9c2:	1f 92       	push	r1
 9c4:	0f 92       	push	r0
 9c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 9ca:	0f 92       	push	r0
 9cc:	11 24       	eor	r1, r1
 9ce:	2f 93       	push	r18
 9d0:	3f 93       	push	r19
 9d2:	4f 93       	push	r20
 9d4:	5f 93       	push	r21
 9d6:	6f 93       	push	r22
 9d8:	7f 93       	push	r23
 9da:	8f 93       	push	r24
 9dc:	9f 93       	push	r25
 9de:	af 93       	push	r26
 9e0:	bf 93       	push	r27
 9e2:	ef 93       	push	r30
 9e4:	ff 93       	push	r31
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	cd b7       	in	r28, 0x3d	; 61
 9ec:	de b7       	in	r29, 0x3e	; 62
 9ee:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <INT1_ptr>
 9f2:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <INT1_ptr+0x1>
 9f6:	fc 01       	movw	r30, r24
 9f8:	09 95       	icall
 9fa:	00 00       	nop
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	ff 91       	pop	r31
 a02:	ef 91       	pop	r30
 a04:	bf 91       	pop	r27
 a06:	af 91       	pop	r26
 a08:	9f 91       	pop	r25
 a0a:	8f 91       	pop	r24
 a0c:	7f 91       	pop	r23
 a0e:	6f 91       	pop	r22
 a10:	5f 91       	pop	r21
 a12:	4f 91       	pop	r20
 a14:	3f 91       	pop	r19
 a16:	2f 91       	pop	r18
 a18:	0f 90       	pop	r0
 a1a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 a1e:	0f 90       	pop	r0
 a20:	1f 90       	pop	r1
 a22:	18 95       	reti

00000a24 <__vector_3>:

void __vector_3(void) __attribute__((signal,used));
void __vector_3(void)
{
 a24:	1f 92       	push	r1
 a26:	0f 92       	push	r0
 a28:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 a2c:	0f 92       	push	r0
 a2e:	11 24       	eor	r1, r1
 a30:	2f 93       	push	r18
 a32:	3f 93       	push	r19
 a34:	4f 93       	push	r20
 a36:	5f 93       	push	r21
 a38:	6f 93       	push	r22
 a3a:	7f 93       	push	r23
 a3c:	8f 93       	push	r24
 a3e:	9f 93       	push	r25
 a40:	af 93       	push	r26
 a42:	bf 93       	push	r27
 a44:	ef 93       	push	r30
 a46:	ff 93       	push	r31
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
 a4c:	cd b7       	in	r28, 0x3d	; 61
 a4e:	de b7       	in	r29, 0x3e	; 62
	//call func(pointer to function)
	//APP_func();
	INT2_ptr();
 a50:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <INT2_ptr>
 a54:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <INT2_ptr+0x1>
 a58:	fc 01       	movw	r30, r24
 a5a:	09 95       	icall
	//DIO_setPinValue(DIO_PINA0,DIO_HIGH);
}
 a5c:	00 00       	nop
 a5e:	df 91       	pop	r29
 a60:	cf 91       	pop	r28
 a62:	ff 91       	pop	r31
 a64:	ef 91       	pop	r30
 a66:	bf 91       	pop	r27
 a68:	af 91       	pop	r26
 a6a:	9f 91       	pop	r25
 a6c:	8f 91       	pop	r24
 a6e:	7f 91       	pop	r23
 a70:	6f 91       	pop	r22
 a72:	5f 91       	pop	r21
 a74:	4f 91       	pop	r20
 a76:	3f 91       	pop	r19
 a78:	2f 91       	pop	r18
 a7a:	0f 90       	pop	r0
 a7c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 a80:	0f 90       	pop	r0
 a82:	1f 90       	pop	r1
 a84:	18 95       	reti

00000a86 <I2C_init>:
 *  Author: biso2
 */ 
#include "I2C_INT.h"

void I2C_init(enum I2C_mode mode)
{
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	1f 92       	push	r1
 a8c:	cd b7       	in	r28, 0x3d	; 61
 a8e:	de b7       	in	r29, 0x3e	; 62
 a90:	89 83       	std	Y+1, r24	; 0x01
	if(mode == MASTER)
 a92:	89 81       	ldd	r24, Y+1	; 0x01
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	41 f0       	breq	.+16     	; 0xaa8 <I2C_init+0x22>
	{
		
	}
	else if(mode == SLAVE)
 a98:	89 81       	ldd	r24, Y+1	; 0x01
 a9a:	88 23       	and	r24, r24
 a9c:	29 f4       	brne	.+10     	; 0xaa8 <I2C_init+0x22>
	{
		TWAR =  I2C_SLAVE_ADDRESS<<1;
 a9e:	82 e2       	ldi	r24, 0x22	; 34
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	20 ea       	ldi	r18, 0xA0	; 160
 aa4:	fc 01       	movw	r30, r24
 aa6:	20 83       	st	Z, r18
	}
	//enable
	SET_BIT(TWCR, TWEN);
 aa8:	86 e5       	ldi	r24, 0x56	; 86
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	26 e5       	ldi	r18, 0x56	; 86
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	f9 01       	movw	r30, r18
 ab2:	20 81       	ld	r18, Z
 ab4:	24 60       	ori	r18, 0x04	; 4
 ab6:	fc 01       	movw	r30, r24
 ab8:	20 83       	st	Z, r18
	TWBR = 72;
 aba:	80 e2       	ldi	r24, 0x20	; 32
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	28 e4       	ldi	r18, 0x48	; 72
 ac0:	fc 01       	movw	r30, r24
 ac2:	20 83       	st	Z, r18
	
}
 ac4:	00 00       	nop
 ac6:	0f 90       	pop	r0
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	08 95       	ret

00000ace <SPI_Init>:

#include "EXT_INT.h"
#include "DIO_INT.h"
#include "SPI_INT.h"
void SPI_Init()
{
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	cd b7       	in	r28, 0x3d	; 61
 ad4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,MSTR);
 ad6:	8d e2       	ldi	r24, 0x2D	; 45
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	2d e2       	ldi	r18, 0x2D	; 45
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	f9 01       	movw	r30, r18
 ae0:	20 81       	ld	r18, Z
 ae2:	20 61       	ori	r18, 0x10	; 16
 ae4:	fc 01       	movw	r30, r24
 ae6:	20 83       	st	Z, r18
	DIO_setPinDir(DIO_PINB5,DIO_OUTPUT);
 ae8:	61 e0       	ldi	r22, 0x01	; 1
 aea:	8d e0       	ldi	r24, 0x0D	; 13
 aec:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_setPinDir>
	DIO_setPinDir(DIO_PINB7,DIO_OUTPUT);
 af0:	61 e0       	ldi	r22, 0x01	; 1
 af2:	8f e0       	ldi	r24, 0x0F	; 15
 af4:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_setPinDir>
	DIO_setPinDir(DIO_PINB6,DIO_INPUT);
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	8e e0       	ldi	r24, 0x0E	; 14
 afc:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_setPinDir>
	DIO_setPinDir(DIO_PINB4,DIO_OUTPUT);
 b00:	61 e0       	ldi	r22, 0x01	; 1
 b02:	8c e0       	ldi	r24, 0x0C	; 12
 b04:	0e 94 bb 03 	call	0x776	; 0x776 <DIO_setPinDir>

	

	SET_BIT(SPCR,SPE);
 b08:	8d e2       	ldi	r24, 0x2D	; 45
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	2d e2       	ldi	r18, 0x2D	; 45
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	f9 01       	movw	r30, r18
 b12:	20 81       	ld	r18, Z
 b14:	20 64       	ori	r18, 0x40	; 64
 b16:	fc 01       	movw	r30, r24
 b18:	20 83       	st	Z, r18

	
}
 b1a:	00 00       	nop
 b1c:	df 91       	pop	r29
 b1e:	cf 91       	pop	r28
 b20:	08 95       	ret

00000b22 <__vector_11>:
void (*CTC_ptr)();

void TIMER0_setCallbackCTC( void (*APP_func)() )
{
	CTC_ptr = APP_func;
}
 b22:	1f 92       	push	r1
 b24:	0f 92       	push	r0
 b26:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 b2a:	0f 92       	push	r0
 b2c:	11 24       	eor	r1, r1
 b2e:	2f 93       	push	r18
 b30:	3f 93       	push	r19
 b32:	4f 93       	push	r20
 b34:	5f 93       	push	r21
 b36:	6f 93       	push	r22
 b38:	7f 93       	push	r23
 b3a:	8f 93       	push	r24
 b3c:	9f 93       	push	r25
 b3e:	af 93       	push	r26
 b40:	bf 93       	push	r27
 b42:	ef 93       	push	r30
 b44:	ff 93       	push	r31
 b46:	cf 93       	push	r28
 b48:	df 93       	push	r29
 b4a:	cd b7       	in	r28, 0x3d	; 61
 b4c:	de b7       	in	r29, 0x3e	; 62
 b4e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <OV_ptr>
 b52:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <OV_ptr+0x1>
 b56:	fc 01       	movw	r30, r24
 b58:	09 95       	icall
 b5a:	00 00       	nop
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	ff 91       	pop	r31
 b62:	ef 91       	pop	r30
 b64:	bf 91       	pop	r27
 b66:	af 91       	pop	r26
 b68:	9f 91       	pop	r25
 b6a:	8f 91       	pop	r24
 b6c:	7f 91       	pop	r23
 b6e:	6f 91       	pop	r22
 b70:	5f 91       	pop	r21
 b72:	4f 91       	pop	r20
 b74:	3f 91       	pop	r19
 b76:	2f 91       	pop	r18
 b78:	0f 90       	pop	r0
 b7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 b7e:	0f 90       	pop	r0
 b80:	1f 90       	pop	r1
 b82:	18 95       	reti

00000b84 <__vector_10>:

//ISR
void __vector_10(void) __attribute__((signal,used));
void __vector_10(void)
{
 b84:	1f 92       	push	r1
 b86:	0f 92       	push	r0
 b88:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 b8c:	0f 92       	push	r0
 b8e:	11 24       	eor	r1, r1
 b90:	2f 93       	push	r18
 b92:	3f 93       	push	r19
 b94:	4f 93       	push	r20
 b96:	5f 93       	push	r21
 b98:	6f 93       	push	r22
 b9a:	7f 93       	push	r23
 b9c:	8f 93       	push	r24
 b9e:	9f 93       	push	r25
 ba0:	af 93       	push	r26
 ba2:	bf 93       	push	r27
 ba4:	ef 93       	push	r30
 ba6:	ff 93       	push	r31
 ba8:	cf 93       	push	r28
 baa:	df 93       	push	r29
 bac:	cd b7       	in	r28, 0x3d	; 61
 bae:	de b7       	in	r29, 0x3e	; 62
	//toggleLed();
	CTC_ptr();
 bb0:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <CTC_ptr>
 bb4:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <CTC_ptr+0x1>
 bb8:	fc 01       	movw	r30, r24
 bba:	09 95       	icall
	
}
 bbc:	00 00       	nop
 bbe:	df 91       	pop	r29
 bc0:	cf 91       	pop	r28
 bc2:	ff 91       	pop	r31
 bc4:	ef 91       	pop	r30
 bc6:	bf 91       	pop	r27
 bc8:	af 91       	pop	r26
 bca:	9f 91       	pop	r25
 bcc:	8f 91       	pop	r24
 bce:	7f 91       	pop	r23
 bd0:	6f 91       	pop	r22
 bd2:	5f 91       	pop	r21
 bd4:	4f 91       	pop	r20
 bd6:	3f 91       	pop	r19
 bd8:	2f 91       	pop	r18
 bda:	0f 90       	pop	r0
 bdc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 be0:	0f 90       	pop	r0
 be2:	1f 90       	pop	r1
 be4:	18 95       	reti

00000be6 <UART_init>:
#include "BIT_MATH.h"
#include "UART_PRIV.h"
#include "UART_CONFIG.h"
#include "UART_INT.h"
void UART_init()
{
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	1f 92       	push	r1
 bec:	cd b7       	in	r28, 0x3d	; 61
 bee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
 bf0:	8a e2       	ldi	r24, 0x2A	; 42
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	2a e2       	ldi	r18, 0x2A	; 42
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	f9 01       	movw	r30, r18
 bfa:	20 81       	ld	r18, Z
 bfc:	20 61       	ori	r18, 0x10	; 16
 bfe:	fc 01       	movw	r30, r24
 c00:	20 83       	st	Z, r18
	SET_BIT(UCSRB,TXEN);
 c02:	8a e2       	ldi	r24, 0x2A	; 42
 c04:	90 e0       	ldi	r25, 0x00	; 0
 c06:	2a e2       	ldi	r18, 0x2A	; 42
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	f9 01       	movw	r30, r18
 c0c:	20 81       	ld	r18, Z
 c0e:	28 60       	ori	r18, 0x08	; 8
 c10:	fc 01       	movw	r30, r24
 c12:	20 83       	st	Z, r18
	
	u8 x=0b10000000;
 c14:	80 e8       	ldi	r24, 0x80	; 128
 c16:	89 83       	std	Y+1, r24	; 0x01
	#if(UART_NUM_BIT_MODE==UART_8BIT_MODE)
	SET_BIT(UCSRB,UCSZ2);
 c18:	8a e2       	ldi	r24, 0x2A	; 42
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	2a e2       	ldi	r18, 0x2A	; 42
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	f9 01       	movw	r30, r18
 c22:	20 81       	ld	r18, Z
 c24:	24 60       	ori	r18, 0x04	; 4
 c26:	fc 01       	movw	r30, r24
 c28:	20 83       	st	Z, r18
	SET_BIT(x,UCSZ1);
 c2a:	89 81       	ldd	r24, Y+1	; 0x01
 c2c:	84 60       	ori	r24, 0x04	; 4
 c2e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(x,UCSZ2);
 c30:	89 81       	ldd	r24, Y+1	; 0x01
 c32:	84 60       	ori	r24, 0x04	; 4
 c34:	89 83       	std	Y+1, r24	; 0x01

	#elif(UART_NUM_BIT_MODE==UART_7BIT_MODE)

	#endif
	#if(UART_NUM_STOP_BIT==UART_STOP_1BIT)
	CLEAR_BIT(x,USBS);
 c36:	89 81       	ldd	r24, Y+1	; 0x01
 c38:	87 7f       	andi	r24, 0xF7	; 247
 c3a:	89 83       	std	Y+1, r24	; 0x01
	#elif(UART_NUM_STOP_BIT==UART_STOP_2BIT)
	SET_BIT(x,USBS);

	#endif
	#if(UART_PARITY_MODE==UART_PARITY_DISABLED)
	CLEAR_BIT(x,UPM0);
 c3c:	89 81       	ldd	r24, Y+1	; 0x01
 c3e:	8f 7e       	andi	r24, 0xEF	; 239
 c40:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(x,UPM1);
 c42:	89 81       	ldd	r24, Y+1	; 0x01
 c44:	8f 7d       	andi	r24, 0xDF	; 223
 c46:	89 83       	std	Y+1, r24	; 0x01

	#elif(UART_PARITY_MODE==UART_PARITY_EVEN)
	CLEAR_BIT(x,UPM0);
	SET_BIT(x,UPM1);
	#endif
	UCSRC_UBRRH=x;
 c48:	80 e4       	ldi	r24, 0x40	; 64
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	29 81       	ldd	r18, Y+1	; 0x01
 c4e:	fc 01       	movw	r30, r24
 c50:	20 83       	st	Z, r18
	UBRRL=UART_BAUD_9600;
 c52:	89 e2       	ldi	r24, 0x29	; 41
 c54:	90 e0       	ldi	r25, 0x00	; 0
 c56:	27 e6       	ldi	r18, 0x67	; 103
 c58:	fc 01       	movw	r30, r24
 c5a:	20 83       	st	Z, r18

}
 c5c:	00 00       	nop
 c5e:	0f 90       	pop	r0
 c60:	df 91       	pop	r29
 c62:	cf 91       	pop	r28
 c64:	08 95       	ret

00000c66 <UART_sendData>:
void UART_sendData(u8 data)
{
 c66:	cf 93       	push	r28
 c68:	df 93       	push	r29
 c6a:	1f 92       	push	r1
 c6c:	cd b7       	in	r28, 0x3d	; 61
 c6e:	de b7       	in	r29, 0x3e	; 62
 c70:	89 83       	std	Y+1, r24	; 0x01
	// data register e,pty
	while(GET_BIT(UCSRA,UDRE)==0);
 c72:	00 00       	nop
 c74:	8b e2       	ldi	r24, 0x2B	; 43
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	fc 01       	movw	r30, r24
 c7a:	80 81       	ld	r24, Z
 c7c:	82 95       	swap	r24
 c7e:	86 95       	lsr	r24
 c80:	87 70       	andi	r24, 0x07	; 7
 c82:	88 2f       	mov	r24, r24
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	81 70       	andi	r24, 0x01	; 1
 c88:	99 27       	eor	r25, r25
 c8a:	89 2b       	or	r24, r25
 c8c:	99 f3       	breq	.-26     	; 0xc74 <UART_sendData+0xe>
	//send
	UDR= data;
 c8e:	8c e2       	ldi	r24, 0x2C	; 44
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	29 81       	ldd	r18, Y+1	; 0x01
 c94:	fc 01       	movw	r30, r24
 c96:	20 83       	st	Z, r18
}
 c98:	00 00       	nop
 c9a:	0f 90       	pop	r0
 c9c:	df 91       	pop	r29
 c9e:	cf 91       	pop	r28
 ca0:	08 95       	ret

00000ca2 <UART_sendString>:
void UART_sendString(u8* str)
{
 ca2:	cf 93       	push	r28
 ca4:	df 93       	push	r29
 ca6:	00 d0       	rcall	.+0      	; 0xca8 <UART_sendString+0x6>
 ca8:	1f 92       	push	r1
 caa:	cd b7       	in	r28, 0x3d	; 61
 cac:	de b7       	in	r29, 0x3e	; 62
 cae:	9b 83       	std	Y+3, r25	; 0x03
 cb0:	8a 83       	std	Y+2, r24	; 0x02
		u8 i=0;
 cb2:	19 82       	std	Y+1, r1	; 0x01
		while(str[i] != '\0')
 cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <UART_sendString+0x30>
		{
			UART_sendData(str[i]);
 cb6:	89 81       	ldd	r24, Y+1	; 0x01
 cb8:	88 2f       	mov	r24, r24
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	2a 81       	ldd	r18, Y+2	; 0x02
 cbe:	3b 81       	ldd	r19, Y+3	; 0x03
 cc0:	82 0f       	add	r24, r18
 cc2:	93 1f       	adc	r25, r19
 cc4:	fc 01       	movw	r30, r24
 cc6:	80 81       	ld	r24, Z
 cc8:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendData>
			i++;
 ccc:	89 81       	ldd	r24, Y+1	; 0x01
 cce:	8f 5f       	subi	r24, 0xFF	; 255
 cd0:	89 83       	std	Y+1, r24	; 0x01
	UDR= data;
}
void UART_sendString(u8* str)
{
		u8 i=0;
		while(str[i] != '\0')
 cd2:	89 81       	ldd	r24, Y+1	; 0x01
 cd4:	88 2f       	mov	r24, r24
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	2a 81       	ldd	r18, Y+2	; 0x02
 cda:	3b 81       	ldd	r19, Y+3	; 0x03
 cdc:	82 0f       	add	r24, r18
 cde:	93 1f       	adc	r25, r19
 ce0:	fc 01       	movw	r30, r24
 ce2:	80 81       	ld	r24, Z
 ce4:	88 23       	and	r24, r24
 ce6:	39 f7       	brne	.-50     	; 0xcb6 <UART_sendString+0x14>
		{
			UART_sendData(str[i]);
			i++;
		}
}
 ce8:	00 00       	nop
 cea:	0f 90       	pop	r0
 cec:	0f 90       	pop	r0
 cee:	0f 90       	pop	r0
 cf0:	df 91       	pop	r29
 cf2:	cf 91       	pop	r28
 cf4:	08 95       	ret

00000cf6 <UART_receiveData>:

u8 UART_receiveData()
{
 cf6:	cf 93       	push	r28
 cf8:	df 93       	push	r29
 cfa:	00 d0       	rcall	.+0      	; 0xcfc <UART_receiveData+0x6>
 cfc:	cd b7       	in	r28, 0x3d	; 61
 cfe:	de b7       	in	r29, 0x3e	; 62
	//CHECK RECEIVE COMPLETE
	u32 timeout=0;
 d00:	1a 82       	std	Y+2, r1	; 0x02
 d02:	19 82       	std	Y+1, r1	; 0x01

	while(GET_BIT(UCSRA,RXC)==0)
 d04:	05 c0       	rjmp	.+10     	; 0xd10 <UART_receiveData+0x1a>
	{
		timeout++;
 d06:	89 81       	ldd	r24, Y+1	; 0x01
 d08:	9a 81       	ldd	r25, Y+2	; 0x02
 d0a:	01 96       	adiw	r24, 0x01	; 1
 d0c:	9a 83       	std	Y+2, r25	; 0x02
 d0e:	89 83       	std	Y+1, r24	; 0x01
u8 UART_receiveData()
{
	//CHECK RECEIVE COMPLETE
	u32 timeout=0;

	while(GET_BIT(UCSRA,RXC)==0)
 d10:	8b e2       	ldi	r24, 0x2B	; 43
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	fc 01       	movw	r30, r24
 d16:	80 81       	ld	r24, Z
 d18:	88 1f       	adc	r24, r24
 d1a:	88 27       	eor	r24, r24
 d1c:	88 1f       	adc	r24, r24
 d1e:	88 2f       	mov	r24, r24
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	81 70       	andi	r24, 0x01	; 1
 d24:	99 27       	eor	r25, r25
 d26:	89 2b       	or	r24, r25
 d28:	71 f3       	breq	.-36     	; 0xd06 <UART_receiveData+0x10>
		{
			return UART_NOT_RECEIVED;
		}
	}
	//READ DATA
	return UDR;
 d2a:	8c e2       	ldi	r24, 0x2C	; 44
 d2c:	90 e0       	ldi	r25, 0x00	; 0
 d2e:	fc 01       	movw	r30, r24
 d30:	80 81       	ld	r24, Z
 d32:	0f 90       	pop	r0
 d34:	0f 90       	pop	r0
 d36:	df 91       	pop	r29
 d38:	cf 91       	pop	r28
 d3a:	08 95       	ret

00000d3c <__cmpsf2>:
 d3c:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_cmp>
 d40:	08 f4       	brcc	.+2      	; 0xd44 <__cmpsf2+0x8>
 d42:	81 e0       	ldi	r24, 0x01	; 1
 d44:	08 95       	ret

00000d46 <__fixunssfsi>:
 d46:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_splitA>
 d4a:	88 f0       	brcs	.+34     	; 0xd6e <__fixunssfsi+0x28>
 d4c:	9f 57       	subi	r25, 0x7F	; 127
 d4e:	98 f0       	brcs	.+38     	; 0xd76 <__fixunssfsi+0x30>
 d50:	b9 2f       	mov	r27, r25
 d52:	99 27       	eor	r25, r25
 d54:	b7 51       	subi	r27, 0x17	; 23
 d56:	b0 f0       	brcs	.+44     	; 0xd84 <__fixunssfsi+0x3e>
 d58:	e1 f0       	breq	.+56     	; 0xd92 <__fixunssfsi+0x4c>
 d5a:	66 0f       	add	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	99 1f       	adc	r25, r25
 d62:	1a f0       	brmi	.+6      	; 0xd6a <__fixunssfsi+0x24>
 d64:	ba 95       	dec	r27
 d66:	c9 f7       	brne	.-14     	; 0xd5a <__fixunssfsi+0x14>
 d68:	14 c0       	rjmp	.+40     	; 0xd92 <__fixunssfsi+0x4c>
 d6a:	b1 30       	cpi	r27, 0x01	; 1
 d6c:	91 f0       	breq	.+36     	; 0xd92 <__fixunssfsi+0x4c>
 d6e:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_zero>
 d72:	b1 e0       	ldi	r27, 0x01	; 1
 d74:	08 95       	ret
 d76:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__fp_zero>
 d7a:	67 2f       	mov	r22, r23
 d7c:	78 2f       	mov	r23, r24
 d7e:	88 27       	eor	r24, r24
 d80:	b8 5f       	subi	r27, 0xF8	; 248
 d82:	39 f0       	breq	.+14     	; 0xd92 <__fixunssfsi+0x4c>
 d84:	b9 3f       	cpi	r27, 0xF9	; 249
 d86:	cc f3       	brlt	.-14     	; 0xd7a <__fixunssfsi+0x34>
 d88:	86 95       	lsr	r24
 d8a:	77 95       	ror	r23
 d8c:	67 95       	ror	r22
 d8e:	b3 95       	inc	r27
 d90:	d9 f7       	brne	.-10     	; 0xd88 <__fixunssfsi+0x42>
 d92:	3e f4       	brtc	.+14     	; 0xda2 <__fixunssfsi+0x5c>
 d94:	90 95       	com	r25
 d96:	80 95       	com	r24
 d98:	70 95       	com	r23
 d9a:	61 95       	neg	r22
 d9c:	7f 4f       	sbci	r23, 0xFF	; 255
 d9e:	8f 4f       	sbci	r24, 0xFF	; 255
 da0:	9f 4f       	sbci	r25, 0xFF	; 255
 da2:	08 95       	ret

00000da4 <__fp_cmp>:
 da4:	99 0f       	add	r25, r25
 da6:	00 08       	sbc	r0, r0
 da8:	55 0f       	add	r21, r21
 daa:	aa 0b       	sbc	r26, r26
 dac:	e0 e8       	ldi	r30, 0x80	; 128
 dae:	fe ef       	ldi	r31, 0xFE	; 254
 db0:	16 16       	cp	r1, r22
 db2:	17 06       	cpc	r1, r23
 db4:	e8 07       	cpc	r30, r24
 db6:	f9 07       	cpc	r31, r25
 db8:	c0 f0       	brcs	.+48     	; 0xdea <__fp_cmp+0x46>
 dba:	12 16       	cp	r1, r18
 dbc:	13 06       	cpc	r1, r19
 dbe:	e4 07       	cpc	r30, r20
 dc0:	f5 07       	cpc	r31, r21
 dc2:	98 f0       	brcs	.+38     	; 0xdea <__fp_cmp+0x46>
 dc4:	62 1b       	sub	r22, r18
 dc6:	73 0b       	sbc	r23, r19
 dc8:	84 0b       	sbc	r24, r20
 dca:	95 0b       	sbc	r25, r21
 dcc:	39 f4       	brne	.+14     	; 0xddc <__fp_cmp+0x38>
 dce:	0a 26       	eor	r0, r26
 dd0:	61 f0       	breq	.+24     	; 0xdea <__fp_cmp+0x46>
 dd2:	23 2b       	or	r18, r19
 dd4:	24 2b       	or	r18, r20
 dd6:	25 2b       	or	r18, r21
 dd8:	21 f4       	brne	.+8      	; 0xde2 <__fp_cmp+0x3e>
 dda:	08 95       	ret
 ddc:	0a 26       	eor	r0, r26
 dde:	09 f4       	brne	.+2      	; 0xde2 <__fp_cmp+0x3e>
 de0:	a1 40       	sbci	r26, 0x01	; 1
 de2:	a6 95       	lsr	r26
 de4:	8f ef       	ldi	r24, 0xFF	; 255
 de6:	81 1d       	adc	r24, r1
 de8:	81 1d       	adc	r24, r1
 dea:	08 95       	ret

00000dec <__fp_inf>:
 dec:	97 f9       	bld	r25, 7
 dee:	9f 67       	ori	r25, 0x7F	; 127
 df0:	80 e8       	ldi	r24, 0x80	; 128
 df2:	70 e0       	ldi	r23, 0x00	; 0
 df4:	60 e0       	ldi	r22, 0x00	; 0
 df6:	08 95       	ret

00000df8 <__fp_nan>:
 df8:	9f ef       	ldi	r25, 0xFF	; 255
 dfa:	80 ec       	ldi	r24, 0xC0	; 192
 dfc:	08 95       	ret

00000dfe <__fp_pscA>:
 dfe:	00 24       	eor	r0, r0
 e00:	0a 94       	dec	r0
 e02:	16 16       	cp	r1, r22
 e04:	17 06       	cpc	r1, r23
 e06:	18 06       	cpc	r1, r24
 e08:	09 06       	cpc	r0, r25
 e0a:	08 95       	ret

00000e0c <__fp_pscB>:
 e0c:	00 24       	eor	r0, r0
 e0e:	0a 94       	dec	r0
 e10:	12 16       	cp	r1, r18
 e12:	13 06       	cpc	r1, r19
 e14:	14 06       	cpc	r1, r20
 e16:	05 06       	cpc	r0, r21
 e18:	08 95       	ret

00000e1a <__fp_round>:
 e1a:	09 2e       	mov	r0, r25
 e1c:	03 94       	inc	r0
 e1e:	00 0c       	add	r0, r0
 e20:	11 f4       	brne	.+4      	; 0xe26 <__fp_round+0xc>
 e22:	88 23       	and	r24, r24
 e24:	52 f0       	brmi	.+20     	; 0xe3a <__fp_round+0x20>
 e26:	bb 0f       	add	r27, r27
 e28:	40 f4       	brcc	.+16     	; 0xe3a <__fp_round+0x20>
 e2a:	bf 2b       	or	r27, r31
 e2c:	11 f4       	brne	.+4      	; 0xe32 <__fp_round+0x18>
 e2e:	60 ff       	sbrs	r22, 0
 e30:	04 c0       	rjmp	.+8      	; 0xe3a <__fp_round+0x20>
 e32:	6f 5f       	subi	r22, 0xFF	; 255
 e34:	7f 4f       	sbci	r23, 0xFF	; 255
 e36:	8f 4f       	sbci	r24, 0xFF	; 255
 e38:	9f 4f       	sbci	r25, 0xFF	; 255
 e3a:	08 95       	ret

00000e3c <__fp_split3>:
 e3c:	57 fd       	sbrc	r21, 7
 e3e:	90 58       	subi	r25, 0x80	; 128
 e40:	44 0f       	add	r20, r20
 e42:	55 1f       	adc	r21, r21
 e44:	59 f0       	breq	.+22     	; 0xe5c <__fp_splitA+0x10>
 e46:	5f 3f       	cpi	r21, 0xFF	; 255
 e48:	71 f0       	breq	.+28     	; 0xe66 <__fp_splitA+0x1a>
 e4a:	47 95       	ror	r20

00000e4c <__fp_splitA>:
 e4c:	88 0f       	add	r24, r24
 e4e:	97 fb       	bst	r25, 7
 e50:	99 1f       	adc	r25, r25
 e52:	61 f0       	breq	.+24     	; 0xe6c <__fp_splitA+0x20>
 e54:	9f 3f       	cpi	r25, 0xFF	; 255
 e56:	79 f0       	breq	.+30     	; 0xe76 <__fp_splitA+0x2a>
 e58:	87 95       	ror	r24
 e5a:	08 95       	ret
 e5c:	12 16       	cp	r1, r18
 e5e:	13 06       	cpc	r1, r19
 e60:	14 06       	cpc	r1, r20
 e62:	55 1f       	adc	r21, r21
 e64:	f2 cf       	rjmp	.-28     	; 0xe4a <__fp_split3+0xe>
 e66:	46 95       	lsr	r20
 e68:	f1 df       	rcall	.-30     	; 0xe4c <__fp_splitA>
 e6a:	08 c0       	rjmp	.+16     	; 0xe7c <__fp_splitA+0x30>
 e6c:	16 16       	cp	r1, r22
 e6e:	17 06       	cpc	r1, r23
 e70:	18 06       	cpc	r1, r24
 e72:	99 1f       	adc	r25, r25
 e74:	f1 cf       	rjmp	.-30     	; 0xe58 <__fp_splitA+0xc>
 e76:	86 95       	lsr	r24
 e78:	71 05       	cpc	r23, r1
 e7a:	61 05       	cpc	r22, r1
 e7c:	08 94       	sec
 e7e:	08 95       	ret

00000e80 <__fp_zero>:
 e80:	e8 94       	clt

00000e82 <__fp_szero>:
 e82:	bb 27       	eor	r27, r27
 e84:	66 27       	eor	r22, r22
 e86:	77 27       	eor	r23, r23
 e88:	cb 01       	movw	r24, r22
 e8a:	97 f9       	bld	r25, 7
 e8c:	08 95       	ret

00000e8e <__gesf2>:
 e8e:	0e 94 d2 06 	call	0xda4	; 0xda4 <__fp_cmp>
 e92:	08 f4       	brcc	.+2      	; 0xe96 <__gesf2+0x8>
 e94:	8f ef       	ldi	r24, 0xFF	; 255
 e96:	08 95       	ret

00000e98 <__mulsf3>:
 e98:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3x>
 e9c:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_round>
 ea0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__fp_pscA>
 ea4:	38 f0       	brcs	.+14     	; 0xeb4 <__mulsf3+0x1c>
 ea6:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fp_pscB>
 eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__mulsf3+0x1c>
 eac:	95 23       	and	r25, r21
 eae:	11 f0       	breq	.+4      	; 0xeb4 <__mulsf3+0x1c>
 eb0:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_inf>
 eb4:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__fp_nan>
 eb8:	11 24       	eor	r1, r1
 eba:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_szero>

00000ebe <__mulsf3x>:
 ebe:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_split3>
 ec2:	70 f3       	brcs	.-36     	; 0xea0 <__mulsf3+0x8>

00000ec4 <__mulsf3_pse>:
 ec4:	95 9f       	mul	r25, r21
 ec6:	c1 f3       	breq	.-16     	; 0xeb8 <__mulsf3+0x20>
 ec8:	95 0f       	add	r25, r21
 eca:	50 e0       	ldi	r21, 0x00	; 0
 ecc:	55 1f       	adc	r21, r21
 ece:	62 9f       	mul	r22, r18
 ed0:	f0 01       	movw	r30, r0
 ed2:	72 9f       	mul	r23, r18
 ed4:	bb 27       	eor	r27, r27
 ed6:	f0 0d       	add	r31, r0
 ed8:	b1 1d       	adc	r27, r1
 eda:	63 9f       	mul	r22, r19
 edc:	aa 27       	eor	r26, r26
 ede:	f0 0d       	add	r31, r0
 ee0:	b1 1d       	adc	r27, r1
 ee2:	aa 1f       	adc	r26, r26
 ee4:	64 9f       	mul	r22, r20
 ee6:	66 27       	eor	r22, r22
 ee8:	b0 0d       	add	r27, r0
 eea:	a1 1d       	adc	r26, r1
 eec:	66 1f       	adc	r22, r22
 eee:	82 9f       	mul	r24, r18
 ef0:	22 27       	eor	r18, r18
 ef2:	b0 0d       	add	r27, r0
 ef4:	a1 1d       	adc	r26, r1
 ef6:	62 1f       	adc	r22, r18
 ef8:	73 9f       	mul	r23, r19
 efa:	b0 0d       	add	r27, r0
 efc:	a1 1d       	adc	r26, r1
 efe:	62 1f       	adc	r22, r18
 f00:	83 9f       	mul	r24, r19
 f02:	a0 0d       	add	r26, r0
 f04:	61 1d       	adc	r22, r1
 f06:	22 1f       	adc	r18, r18
 f08:	74 9f       	mul	r23, r20
 f0a:	33 27       	eor	r19, r19
 f0c:	a0 0d       	add	r26, r0
 f0e:	61 1d       	adc	r22, r1
 f10:	23 1f       	adc	r18, r19
 f12:	84 9f       	mul	r24, r20
 f14:	60 0d       	add	r22, r0
 f16:	21 1d       	adc	r18, r1
 f18:	82 2f       	mov	r24, r18
 f1a:	76 2f       	mov	r23, r22
 f1c:	6a 2f       	mov	r22, r26
 f1e:	11 24       	eor	r1, r1
 f20:	9f 57       	subi	r25, 0x7F	; 127
 f22:	50 40       	sbci	r21, 0x00	; 0
 f24:	9a f0       	brmi	.+38     	; 0xf4c <__mulsf3_pse+0x88>
 f26:	f1 f0       	breq	.+60     	; 0xf64 <__mulsf3_pse+0xa0>
 f28:	88 23       	and	r24, r24
 f2a:	4a f0       	brmi	.+18     	; 0xf3e <__mulsf3_pse+0x7a>
 f2c:	ee 0f       	add	r30, r30
 f2e:	ff 1f       	adc	r31, r31
 f30:	bb 1f       	adc	r27, r27
 f32:	66 1f       	adc	r22, r22
 f34:	77 1f       	adc	r23, r23
 f36:	88 1f       	adc	r24, r24
 f38:	91 50       	subi	r25, 0x01	; 1
 f3a:	50 40       	sbci	r21, 0x00	; 0
 f3c:	a9 f7       	brne	.-22     	; 0xf28 <__mulsf3_pse+0x64>
 f3e:	9e 3f       	cpi	r25, 0xFE	; 254
 f40:	51 05       	cpc	r21, r1
 f42:	80 f0       	brcs	.+32     	; 0xf64 <__mulsf3_pse+0xa0>
 f44:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_inf>
 f48:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_szero>
 f4c:	5f 3f       	cpi	r21, 0xFF	; 255
 f4e:	e4 f3       	brlt	.-8      	; 0xf48 <__mulsf3_pse+0x84>
 f50:	98 3e       	cpi	r25, 0xE8	; 232
 f52:	d4 f3       	brlt	.-12     	; 0xf48 <__mulsf3_pse+0x84>
 f54:	86 95       	lsr	r24
 f56:	77 95       	ror	r23
 f58:	67 95       	ror	r22
 f5a:	b7 95       	ror	r27
 f5c:	f7 95       	ror	r31
 f5e:	e7 95       	ror	r30
 f60:	9f 5f       	subi	r25, 0xFF	; 255
 f62:	c1 f7       	brne	.-16     	; 0xf54 <__mulsf3_pse+0x90>
 f64:	fe 2b       	or	r31, r30
 f66:	88 0f       	add	r24, r24
 f68:	91 1d       	adc	r25, r1
 f6a:	96 95       	lsr	r25
 f6c:	87 95       	ror	r24
 f6e:	97 f9       	bld	r25, 7
 f70:	08 95       	ret

00000f72 <_exit>:
 f72:	f8 94       	cli

00000f74 <__stop_program>:
 f74:	ff cf       	rjmp	.-2      	; 0xf74 <__stop_program>
